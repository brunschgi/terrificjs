{"majorversion": 2, "filemap": {"terrific-1.0.0.js": {"classlist": ["Tc.Config", "Tc.Application", "Tc.Sandbox", "Tc.Module", "Tc.Connector", "Tc.Utils.String"], "name": "terrific-1.0.0.js", "module": "Tc"}}, "modules": {"Tc": {"description": "Terrific JavaScript Framework v1.0.0\nhttp://terrifically.org\nCopyright 2011, Remo Brunschwiler\nMIT Licensed.\nDate: Thu, 04 Aug 2011 14:56:13 GMT\nIncludes:\nSimple JavaScript Inheritance\nBy John Resig http://ejohn.org/\nMIT Licensed.", "submodules": [], "classlist": ["Tc.Config", "Tc.Application", "Tc.Sandbox", "Tc.Module", "Tc.Connector", "Tc.Utils.String"], "filelist": ["terrific-1.0.0.js"], "subdata": {}, "guessedname": "Tc", "guessedtype": "property", "name": "Tc"}}, "classmap": {"Tc.Sandbox": {"name": "Tc.Sandbox", "author": "Remo Brunschwiler", "constructors": [{"description": "Initializes the Sandbox."}], "namespace": "Tc", "module": "Tc", "guessedname": "Sandbox", "methods": {"getModuleById": {"return": {"type": "Module", "description": "The appropriate module"}, "params": [{"type": "int", "name": "id", "description": " \nThe module ID"}], "description": "Gets the appropriate module for the given ID.", "guessedname": "getModuleById", "guessedtype": "function"}, "getConfigParam": {"return": {"type": "mixed", "description": "The appropriate configuration param"}, "params": [{"type": "String", "name": "name", "description": " \nThe param name"}], "description": "Gets an application config param.", "guessedname": "getConfigParam", "guessedtype": "function"}, "readyForAfterBinding": {"return": {"type": "void", "description": ""}, "params": [{"type": "Function", "name": "callback", "description": " \nThe afterBinding module callback"}], "description": "Collects the module status messages and handles the callbacks.\nThis means that it is ready for afterBinding.", "guessedname": "readyForAfterBinding", "guessedtype": "function"}, "init": {"return": {"type": "void", "description": ""}, "params": [{"type": "Applicaton", "name": "application", "description": " \nThe application reference"}, {"type": "Object", "name": "config", "description": " \nThe configuration"}], "description": "Initializes the Sandbox.", "guessedname": "init", "guessedtype": "function"}, "addModules": {"return": {"type": "Array", "description": "A list containing the references of the registered modules."}, "params": [{"type": "jQuery", "name": "$ctx", "description": " \nThe jQuery context."}], "description": "Adds (register and start) all modules in the given context scope.", "guessedname": "addModules", "guessedtype": "function"}, "getConfig": {"return": {"type": "Object", "description": "The configuration object"}, "description": "Gets the application config.", "guessedname": "getConfig", "guessedtype": "function"}, "loadDependency": {"return": {"type": "void", "description": ""}, "params": [{"type": "String", "name": "dependency", "description": " \nThe dependency (e.g. swfobject.js)"}, {"type": "String", "name": "type", "description": " \nThe dependency type (plugin | library | util | url)"}, {"type": "Function", "name": "callback", "description": " \nThe callback to execute after the dependency has successfully\nloaded."}, {"type": "String", "name": "phase", "description": " \nThe module phase where the dependency is needed\n(e.g. beforeBinding, onBinding)."}], "description": "Loads a requested dependency (if not already loaded).", "guessedname": "loadDependency", "guessedtype": "function"}, "removeModules": {"return": {"type": "void", "description": ""}, "params": [{"type": "Array", "name": "modules", "description": " \nA list containting the module instances to remove."}], "description": "Removes a module by module instances.\nThis stops and unregisters a module through a module instance.", "guessedname": "removeModules", "guessedtype": "function"}}, "file": "terrific-1.0.0.js", "guessedtype": "property", "shortname": "Sandbox", "properties": {"application": {"type": "Application", "description": "The application", "guessedname": "application", "guessedtype": "property"}, "firstScript": {"type": "Node", "description": "Contains the first script node on the page.", "guessedname": "firstScript", "guessedtype": "property"}, "dependencies": {"type": "Array", "description": "Contains the requested javascript dependencies.", "guessedname": "dependencies", "guessedtype": "property"}, "config": {"type": "Object", "description": "The configuration.", "guessedname": "config", "guessedtype": "property"}, "afterBindingCallbacks": {"type": "Array", "description": "Contains the afterBinding module callbacks.", "guessedname": "afterBindingCallbacks", "guessedtype": "property"}}, "description": "The sandbox function\nThe sandbox is used as a central point to get resources from, grant\npermissions, etc.  It is shared between all modules."}, "Tc.Connector": {"name": "Tc.Connector", "author": "Remo Brunschwiler", "constructors": [{"description": "Initializes the Connector."}], "namespace": "Tc", "module": "Tc", "guessedname": "Connector", "methods": {"init": {"return": {"type": "void", "description": ""}, "params": [{"type": "String", "name": "connectorId", "description": " \nThe unique connector ID"}, {"type": "Object", "name": "connectorId", "description": ""}], "description": "Initializes the Connector.", "guessedname": "init", "guessedtype": "function"}, "unregisterComponent": {"return": {"type": "void", "description": ""}, "params": [{"type": "Module", "name": "component", "description": " \nThe module to unregister"}], "description": "Unregisters a component.", "guessedname": "unregisterComponent", "guessedtype": "function"}, "registerComponent": {"return": {"type": "void", "description": ""}, "params": [{"type": "Module", "name": "component", "description": " \nThe module to register"}, {"type": "String", "name": "role", "description": " \nThe role of the module (e.g. master, slave etc.)"}], "description": "Registers a component.", "guessedname": "registerComponent", "guessedtype": "function"}, "notify": {"return": {"type": "boolean", "description": "Indicates whether the default action should be excuted or not"}, "params": [{"type": "Module", "name": "component", "description": " \nThe module that sends the state change"}, {"type": "String", "name": "state", "description": " \nThe component's state"}, {"type": "Object", "name": "data", "description": " \nContains the state relevant data (if any)"}, {"type": "Function", "name": "callback", "description": " \nThe callback function, it can be executed after an asynchronous\naction."}], "description": "Notifies all registered components about a state change \nThis can be be overriden in the specific connectors.", "guessedname": "notify", "guessedtype": "function"}}, "file": "terrific-1.0.0.js", "guessedtype": "property", "shortname": "Connector", "properties": {"proceed": {"description": "Gives the components the ability to prevent the default- and\nafteraction from the events by returning false in the\non {Event}-Handler.", "guessedname": "proceed", "guessedtype": "property"}}, "description": "Base class for the different connectors."}, "Tc.Config": {"name": "Tc.Config", "author": "Remo Brunschwiler", "namespace": "Tc", "module": "Tc", "guessedname": "Config", "static": "", "file": "terrific-1.0.0.js", "guessedtype": "property", "shortname": "Config", "properties": {"dependencyPath": {"type": "Object", "description": "The paths for the different types of dependencies.", "guessedname": "dependencyPath", "guessedtype": "property"}}, "description": "Contains the application base config.\nThe base config can be extended or overwritten either via\nnew Application ($ctx, config), during bootstrapping the application or via \n/public/js/Tc.Config.js in the project folder."}, "Tc.Utils.String": {"name": "Tc.Utils.String", "author": "Remo Brunschwiler", "namespace": "Tc.Utils", "module": "Tc", "methods": {"capitalize": {"return": {"type": "String", "description": "The capitalized string"}, "params": [{"type": "String", "name": "str", "description": " \nThe original string"}], "description": "Capitalizes the first letter of the given string.", "guessedname": "capitalize", "guessedtype": "function"}}, "static": "", "file": "terrific-1.0.0.js", "shortname": "String", "description": "Contains utility functions for string concerning tasks."}, "Tc.Module": {"name": "Tc.Module", "author": "Remo Brunschwiler", "constructors": [{"description": "Initializes the Module."}], "namespace": "Tc", "module": "Tc", "guessedname": "Module", "methods": {"initOnBinding": {"return": {"type": "void", "description": ""}, "description": "Initializes the onBinding phase.", "guessedname": "initOnBinding", "guessedtype": "function"}, "initAfterBinding": {"return": {"type": "void", "description": ""}, "description": "Initializes the afterBinding phase.", "guessedname": "initAfterBinding", "guessedtype": "function"}, "getDecoratedModule": {"return": {"type": "Module", "description": "The decorated module"}, "params": [{"type": "String", "name": "module", "description": " \nThe name of the module"}, {"type": "String", "name": "skin", "description": " \nThe name of the skin"}], "description": "Decorates itself with the given skin.", "guessedname": "getDecoratedModule", "guessedtype": "function"}, "fire": {"return": {"type": "void", "description": ""}, "params": [{"type": "String", "name": "state", "description": " \nThe new state"}, {"type": "Object", "name": "data", "description": " \nThe data to provide to your connected modules"}, {"type": "Function", "name": "defaultAction", "description": " \nThe default action to perform"}], "description": "Notifies all attached connectors about changes.", "guessedname": "fire", "guessedtype": "function"}, "require": {"return": {"type": "void", "description": ""}, "params": [{"type": "String", "name": "dependency", "description": " \nThe dependency (e.g. swfobject.js)"}, {"type": "String", "name": "type", "description": " \nThe dependency type (library | plugin | util | url)"}, {"type": "String", "name": "phase", "description": " \nThe module phase where the dependency is needed\n(e.g. beforeBinding, onBinding)"}, {"type": "boolean", "name": "executeCallback", "description": " \nIndicates whether the phase callback should be executed or not.\nThis is useful for dependencies that provide their own callback\nmechanism."}], "description": "Manages the required dependencies.", "guessedname": "require", "guessedtype": "function"}, "stop": {"return": {"type": "void", "description": ""}, "description": "Template method to stop the module.", "guessedname": "stop", "guessedtype": "function"}, "attachConnector": {"return": {"type": "void", "description": ""}, "params": [{"type": "Connector", "name": "connector", "description": " \nThe connector to attach"}], "description": "Attaches a connector (observer).", "guessedname": "attachConnector", "guessedtype": "function"}, "beforeBindingCallback": {"return": {"type": "void", "description": ""}, "description": "Callback for the before binding phase.", "guessedname": "beforeBindingCallback", "guessedtype": "function"}, "start": {"return": {"type": "void", "description": ""}, "description": "Template method to start (i.e. init) the module.\nThis method provides hook functions which can be overridden\nby the individual instance.", "guessedname": "start", "guessedtype": "function"}, "init": {"return": {"type": "void", "description": ""}, "params": [{"type": "jQuery", "name": "$ctx", "description": " \nThe jQuery context"}, {"type": "Sandbox", "name": "sandbox", "description": " \nThe sandbox to get the resources from"}, {"type": "String", "name": "modId", "description": " \nThe Unique module ID"}], "description": "Initializes the Module.", "guessedname": "init", "guessedtype": "function"}, "checkDependencies": {"return": {"type": "void", "description": ""}, "params": [{"type": "String", "name": "phase", "description": " \nThe phase to check / initialize"}, {"type": "Function", "name": "callback", "description": " \nThe callback to execute if all dependencies were loaded"}], "description": "Checks the dependency load state of the given phase.\nInitializes the appropriate phase if all dependencies are loaded.", "guessedname": "checkDependencies", "guessedtype": "function"}, "initBeforeBinding": {"return": {"type": "void", "description": ""}, "description": "Initializes the beforeBinding phase.", "guessedname": "initBeforeBinding", "guessedtype": "function"}}, "file": "terrific-1.0.0.js", "guessedtype": "property", "shortname": "Module", "properties": {"sandbox": {"type": "Sandbox", "description": "The sandbox to get the resources from.", "guessedname": "sandbox", "guessedtype": "property"}, "connectors": {"type": "Array", "description": "Contains the attached connectors.", "guessedname": "connectors", "guessedtype": "property"}, "onBinding": {"description": "The following counters have to be at least zero, so that\nthe onBinding callback is loaded as a dependency for\nonBinding and the onBinding phase is completed for \nafterBinding.", "guessedname": "onBinding", "guessedtype": "property"}, "dependencyCounter": {"type": "Object", "description": "Contains the dependency counter for the different phases.", "guessedname": "dependencyCounter", "guessedtype": "property"}, "modId": {"type": "String", "description": "Contains the unique module ID.", "guessedname": "modId", "guessedtype": "property"}, "$ctx": {"type": "jQuery", "description": "Contains the module context.", "guessedname": "ctx", "guessedtype": "property"}}, "description": "Base class for the different modules."}, "Tc.Application": {"name": "Tc.Application", "author": "Remo Brunschwiler", "configs": {"data-connectors": {"description": "A module can have a comma-separated list of data connectors.\nThe list contains the IDs of the connectors in the following\nschema: {connectorName}{connectorId}{connectorRole}\nThe example MasterSlave1Master decodes to: name = \nMasterSlave, id = 1, role = Master. This indicates that the\nmodule should notify the MasterSlave connector (the mediator)\non all state changes. The connector id is used to chain the\nappropriate modules together and to improve the\nreusability of the connector. It can contain multiple\nconnector ids (e.g. 1,2,MasterSlave1Master).", "guessedname": "classes", "guessedtype": "property"}, ".skin{moduleName}{skinName}": {"description": "Indicates that the module basic has the submarine skin. It\nwill be decorated by the skin JS (if it exists). It can occur\narbitrarily. Example: .skinBasicSubmarine"}, ".mod{moduleName}": {"description": "Indicates that it is a module of type basic, which is\nderived from the base module. It can occur at most\nonce. Example: .modBasic"}, ".mod": {"description": "Indicates that it is a base module, this is the default and\nno JavaScript needs to be involved. It must occur excactly\nonce."}}, "constructors": [{"description": "Initializes the application."}], "namespace": "Tc", "module": "Tc", "guessedname": "Application", "methods": {"registerModule": {"return": {"type": "Module", "description": "The reference to the registered module."}, "params": [{"type": "jQuery", "name": "$node", "description": " \nThe module node."}, {"type": "String", "name": "modName", "description": " \nThe module name. It must match the class name of the module\n(case sensitive)."}, {"type": "Array", "name": "skins", "description": " \nA list of skin names. Each entry must match a class name of a\nskin (case sensitive)."}], "description": "Registers a module.", "guessedname": "registerModule", "guessedtype": "function"}, "unregisterModule": {"return": {"type": "void", "description": ""}, "params": [{"type": "Array", "name": "modules", "description": " \nA list containting the module instances to unregister"}], "description": "Unregisters the modules given by the module instances.", "guessedname": "unregisterModules", "guessedtype": "function"}, "stop": {"return": {"type": "void", "description": ""}, "params": [{"type": "Array", "name": "modules", "description": " \nA list containting the module instances to stop."}], "description": "Stops the registered modules.", "guessedname": "stop", "guessedtype": "function"}, "start": {"return": {"type": "void", "description": ""}, "params": [{"type": "Array", "name": "modules", "description": " \nA list of the modules to start"}], "description": "Starts (intializes) the registered modules.", "guessedname": "start", "guessedtype": "function"}, "init": {"return": {"type": "void", "description": ""}, "params": [{"type": "jQuery", "name": "$ctx", "description": " \nThe jquery context"}, {"type": "Object", "name": "config", "description": " \nThe configuration"}], "description": "Initializes the application.", "guessedname": "init", "guessedtype": "function"}, "registerConnection": {"return": {"type": "void", "description": ""}, "params": [{"type": "String", "name": "connector", "description": " \nThe full connector name (e.g. MasterSlave1Slave)."}, {"type": "Module", "name": "component", "description": " \nThe module instance."}], "description": "Registers a connection between a module and a connector.", "guessedname": "registerConnection", "guessedtype": "function"}, "registerModules": {"return": {"type": "Array", "description": "A list containing the references of the registered modules."}, "params": [{"type": "jQuery", "name": "$ctx", "description": " \nThe jQuery context."}], "description": "Register modules withing scope\nAutomatically registers all modules within the scope, \nas long as the modules use the OOCSS naming conventions.", "guessedname": "registerModules", "guessedtype": "function"}}, "file": "terrific-1.0.0.js", "guessedtype": "property", "shortname": "Application", "properties": {"modules": {"type": "Array", "description": "Contains references to all modules on the page. This can, for\nxample, be useful when there are interactions between Flash\nobjects and Javascript.", "guessedname": "modules", "guessedtype": "property"}, "sandbox": {"type": "Sandbox", "description": "The sandbox to get the resources from \nThis sandbox is shared between all modules.", "guessedname": "sandbox", "guessedtype": "property"}, "connectors": {"type": "Object", "description": "Contains references to all connectors on the page.", "guessedname": "connectors", "guessedtype": "property"}, "$ctx": {"type": "jQuery", "description": "The jQuery context.", "guessedname": "ctx", "guessedtype": "property"}, "wildcardComponents": {"type": "Array", "description": "Contains references to all wildcard components on the page.", "guessedname": "wildcardComponents", "guessedtype": "property"}, "config": {"type": "Object", "description": "The configuration.", "guessedname": "config", "guessedtype": "property"}}, "description": "Responsible for application-wide issues such as the creation of modules."}}, "version": "1.0.0", "namespaces": ["Tc", "Tc.Utils"]}
{"version":3,"sources":["terrific.js"],"names":["root","factory","define","amd","exports","module","T","this","Application","ctx","config","Utils","isNode","tmpConfig","document","defaults","namespace","Module","extend","_ctx","getElement","_config","_sandbox","Sandbox","_modules","_id","application","_application","_eventEmitters","sandbox","_events","EventEmitter","_listeners","_connected","prototype","registerModules","modules","dispatch","nodes","getModuleNodes","forEach","registerModule","getAttribute","bind","unregisterModules","id","hasOwnProperty","removeAttribute","start","promises","promise","Promise","resolve","reject","push","all","then","err","stop","mod","decorators","hasAttribute","capitalize","camelize","isString","window","split","Array","isArray","isObject","map","decorator","trim","setAttribute","i","len","length","getModuleById","Error","addModules","removeModules","tmpModules","getConfig","getConfigParam","name","undefined","addEventEmitter","eventEmitter","removeEventEmitter","eventEmitters","splice","handle","apply","arguments","off","disconnect","on","addListener","event","listener","connect","once","removeListener","removeAllListeners","listeners","cb","emit","args","slice","call","hasListeners","str","substr","toUpperCase","concat","replace","$1","obj","Object","toString","type","isFunction","node","nodeType","matches","el","selector","p","Element","f","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","s","querySelectorAll","indexOf","source","prop","documentElement","unshift","createModule","spec","Constructor","proto","create","constructor","statics","reservedKeys","property","createDecorator","orig","parent","fn","_parent","version"],"mappings":"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","file":"terrific.min.js","sourcesContent":["(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory();\n  } else {\n    root.T = factory();\n  }\n}(this, function() {\n/*!\n * TerrificJS modularizes your frontend code by solely relying on naming conventions.\n * http://terrifically.org\n *\n * @copyright   Copyright (c) 2016 Remo Brunschwiler\n * @license     Licensed under MIT license\n * @version     3.0.0\n */\n\n/**\n * @module T\n */\n\n/**\n * Responsible for application-wide issues such as the creation of modules.\n *\n * @author Remo Brunschwiler\n * @namespace T\n * @class Application\n *\n * @constructor\n * @param {Node} ctx\n *      The context node\n * @param {Object} config\n *      The configuration\n */\n/* global Sandbox, Utils, Module */\nfunction Application(ctx, config) {\n\t// validate params\n\tif (!ctx && !config) {\n\t\t// both empty\n\t\tctx = document;\n\t\tconfig = {};\n\t}\n\telse if (Utils.isNode(config)) {\n\t\t// reverse order of arguments\n\t\tvar tmpConfig = config;\n\t\tconfig = ctx;\n\t\tctx = tmpConfig;\n\t}\n\telse if (!Utils.isNode(ctx) && !config) {\n\t\t// only config is given\n\t\tconfig = ctx;\n\t\tctx = document;\n\t}\n\telse if (Utils.isNode(ctx) && !config) {\n\t\t// only ctx is given\n\t\tconfig = {};\n\t}\n\n\tvar defaults = {\n\t\tnamespace: Module\n\t};\n\n\tconfig = Utils.extend(defaults, config);\n\n\t/**\n\t * The context node.\n\t *\n\t * @property _ctx\n\t * @type Node\n\t */\n\tthis._ctx = Utils.getElement(ctx);\n\n\t/**\n\t * The configuration.\n\t *\n\t * @property config\n\t * @type Object\n\t */\n\tthis._config = config;\n\n\t/**\n\t * The sandbox to get the resources from.\n\t * The singleton is shared between all modules.\n\t *\n\t * @property _sandbox\n\t * @type Sandbox\n\t */\n\tthis._sandbox = new Sandbox(this);\n\n\t/**\n\t * Contains references to all modules on the page.\n\t *\n\t * @property _modules\n\t * @type Object\n\t */\n\tthis._modules = {};\n\n\t/**\n\t * The next unique module id to use.\n\t *\n\t * @property id\n\t * @type Number\n\t */\n\tthis._id = 1;\n}\n\n/**\n * Register modules within the context\n * Automatically registers all modules within the context,\n * as long as the modules use the naming conventions.\n *\n * @method registerModules\n * @param {Node} ctx\n *      The context node\n * @return {Object}\n *      A collection containing the registered modules\n */\nApplication.prototype.registerModules = function (ctx) {\n\tvar modules = {};\n\n\tctx = Utils.getElement(ctx) || this._ctx;\n\n\tthis._sandbox.dispatch('t.register.start');\n\n\t// get module nodes\n\tvar nodes = Utils.getModuleNodes(ctx);\n\tnodes.forEach(function (ctx) {\n\n\t\t/*\n\t\t * A module can have different data attributes.\n\t\t * See below for possible values.\n\t\t */\n\n\t\t/*\n\t\t * @config data-t-name=\"{mod-name}\"\n\t\t *\n\t\t * Example: data-t-name=\"foo\"\n\t\t * Indicates that the module Foo should be bound.\n\t\t */\n\n\t\t/*\n\t\t * @config data-t-namespace=\"{namespace}\"\n\t\t *\n\t\t * Example: data-t-namespace=\"App.Components\"\n\t\t * The namespace of the module. Optional.\n\t\t */\n\n\t\t/*\n\t\t * @config data-t-decorator=\"{decorator-name}\"\n\t\t *\n\t\t * Example: data-t-decorator=\"bar\"\n\t\t * Indicates that the module Foo should be decorated with the Bar decorator.\n\t\t * Multiple decorators should be comma-separated. Optional.\n\t\t */\n\t\tvar module = this.registerModule(ctx, ctx.getAttribute('data-t-name'), ctx.getAttribute('data-t-decorator'), ctx.getAttribute('data-t-namespace'));\n\n\t\tif (module) {\n\t\t\tmodules[module._ctx.getAttribute('data-t-id')] = module;\n\t\t}\n\t}.bind(this));\n\n\tthis._sandbox.dispatch('t.register.end');\n\n\treturn modules;\n};\n\n/**\n * Unregisters the modules given by the module instances.\n *\n * @method unregisterModules\n * @param {Object} modules\n *      A collection containing the modules to unregister\n */\nApplication.prototype.unregisterModules = function (modules) {\n\tmodules = modules || this._modules;\n\n\tthis._sandbox.dispatch('t.unregister.start');\n\n\t// unregister the given modules\n\tfor (var id in modules) {\n\t\tif (this._modules.hasOwnProperty(id)) {\n\t\t\tif(Utils.isNode(this._modules[id]._ctx)) {\n\t\t\t\tthis._modules[id]._ctx.removeAttribute('data-t-id');\n\t\t\t}\n\t\t\tdelete this._modules[id];\n\t\t}\n\t}\n\n\tthis._sandbox.dispatch('t.unregister.end');\n};\n\n/**\n * Starts (intializes) the registered modules.\n *\n * @method start\n * @param {Object} modules\n *      A collection of modules to start\n * @return {Promise}\n *      The synchronize Promise\n */\nApplication.prototype.start = function (modules) {\n\tmodules = modules || this._modules;\n\n\tvar promises = [];\n\n\tthis._sandbox.dispatch('t.start');\n\n\t// start the modules\n\tfor (var id in modules) {\n\t\tif (modules.hasOwnProperty(id)) {\n\t\t\tvar promise = (function (id) {\n\t\t\t\treturn new Promise(function (resolve, reject) {\n                    modules[id].start(resolve, reject);\n\t\t\t\t});\n\t\t\t}(id));\n\n\t\t\tpromises.push(promise);\n\t\t}\n\t}\n\n\t// synchronize modules\n\tvar all = Promise.all(promises);\n\tall.then(function () {\n\t\tthis._sandbox.dispatch('t.sync');\n\t}.bind(this)).catch(function (err) {\n\t\tthrow err;\n\t});\n\n\treturn all;\n};\n\n/**\n * Stops the registered modules.\n *\n * @method stop\n * @param {Object} modules\n *      A collection of modules to stop\n */\nApplication.prototype.stop = function (modules) {\n\tmodules = modules || this._modules;\n\n\tthis._sandbox.dispatch('t.stop');\n\n\t// stop the modules\n\tfor (var id in modules) {\n\t\tif (modules.hasOwnProperty(id)) {\n\t\t\tmodules[id].stop();\n\t\t}\n\t}\n};\n\n/**\n * Registers a module.\n *\n * @method registerModule\n * @param {Node} ctx\n *      The context node\n * @param {String} mod\n *      The module name. It must match the class name of the module\n * @param {Array} decorators\n *      A list of decorator names. Each entry must match a class name of a decorator\n * @param {String} namespace\n *      The module namespace\n * @return {Module}\n *      The reference to the registered module\n */\nApplication.prototype.registerModule = function (ctx, mod, decorators, namespace) {\n\tvar modules = this._modules;\n\n\t// validate params\n\tif(ctx.hasAttribute('data-t-id')) {\n\t\treturn null; // prevent from registering twice\n\t}\n\n\tmod = Utils.capitalize(Utils.camelize(mod));\n\n\tif (Utils.isString(decorators)) {\n\t\tif (window[decorators]) {\n\t\t\t// decorators param is the namespace\n\t\t\tnamespace = window[decorators];\n\t\t\tdecorators = null;\n\t\t}\n\t\telse {\n\t\t\t// convert string to array\n\t\t\tdecorators = decorators.split(',');\n\t\t}\n\t}\n\telse if (!Array.isArray(decorators) && Utils.isObject(decorators)) {\n\t\t// decorators is the namespace object\n\t\tnamespace = decorators;\n\t\tdecorators = null;\n\t}\n\n\tdecorators = decorators || [];\n\tdecorators = decorators.map(function (decorator) {\n\t\treturn Utils.capitalize(Utils.camelize(decorator.trim()));\n\t});\n\n\tnamespace = namespace || this._config.namespace;\n\n\tif (namespace[mod]) {\n\t\t// assign the module a unique id\n\t\tvar id = this._id++;\n\t\tctx.setAttribute('data-t-id', id);\n\n\t\t// instantiate module\n\t\tmodules[id] = new namespace[mod](ctx, this._sandbox);\n\n\t\t// decorate it\n\t\tfor (var i = 0, len = decorators.length; i < len; i++) {\n\t\t\tvar decorator = decorators[i];\n\n\t\t\tif (namespace[mod][decorator]) {\n\t\t\t\tnamespace[mod][decorator](modules[id]);\n\t\t\t}\n\t\t}\n\n\t\treturn modules[id];\n\t}\n\n\tthis._sandbox.dispatch('t.missing', ctx, mod, decorators, namespace);\n\n\treturn null;\n};\n\n/**\n * Gets the appropriate module for the given ID.\n *\n * @method getModuleById\n * @param {int} id\n *      The module ID\n * @return {Module}\n *      The appropriate module\n */\nApplication.prototype.getModuleById = function (id) {\n\tif (this._modules[id]) {\n\t\treturn this._modules[id];\n\t}\n\telse {\n\t\tthrow Error('The module with the id ' + id +\n\t\t' does not exist');\n\t}\n};\n\n/**\n * The sandbox is used as a central point to get resources from, add modules etc.\n * It is shared between all modules.\n *\n * @author Remo Brunschwiler\n * @namespace T\n * @class Sandbox\n *\n * @constructor\n * @param {Application} application\n *      The application reference\n */\n/* global Utils */\nfunction Sandbox(application) {\n\t/**\n\t * The application.\n\t *\n\t * @property _application\n\t * @type Application\n\t */\n\tthis._application = application;\n\n\t/**\n\t * Contains references to all module event emitters.\n\t *\n\t * @property _eventEmitters\n\t * @type Array\n\t */\n\tthis._eventEmitters = [];\n}\n\n/**\n * Adds (register and start) all modules in the given context scope.\n *\n * @method addModules\n * @param {Node} ctx\n *      The context node\n * @return {Object}\n *      A collection containing the registered modules\n */\nSandbox.prototype.addModules = function (ctx) {\n\tvar modules = {},\n\t\tapplication = this._application;\n\n\tif (Utils.isNode(ctx)) {\n\t\t// register modules\n\t\tmodules = application.registerModules(ctx);\n\n\t\t// start modules\n\t\tapplication.start(modules);\n\t}\n\n\treturn modules;\n};\n\n/**\n * Removes a module by module instances.\n * This stops and unregisters a module through a module instance.\n *\n * @method removeModules\n * @param {any} modules\n *      A collection of module to remove | Node context to look for registered modules in.\n * @return {Sandbox}\n */\nSandbox.prototype.removeModules = function (modules) {\n\tvar application = this._application;\n\n\tif (Utils.isNode(modules)) {\n\t\t// get modules\n\t\tvar tmpModules = {};\n\n\t\tvar nodes = Utils.getModuleNodes(modules);\n\t\tnodes.forEach(function (ctx) {\n\t\t\t// check for instance\n\t\t\tif (ctx.hasAttribute('data-t-id')) {\n\t\t\t\tvar id = ctx.getAttribute('data-t-id');\n\t\t\t\tvar module = this.getModuleById(id);\n\n\t\t\t\tif (module) {\n\t\t\t\t\ttmpModules[id] = module;\n\t\t\t\t}\n\t\t\t}\n\t\t}.bind(this));\n\n\t\tmodules = tmpModules;\n\t}\n\n\tif(Utils.isObject(modules)) {\n\t\t// stop modules – let the module clean itself\n\t\tapplication.stop(modules);\n\n\t\t// unregister modules – clean up the application\n\t\tapplication.unregisterModules(modules);\n\t}\n\n\treturn this;\n};\n\n/**\n * Gets the appropriate module for the given ID.\n *\n * @method getModuleById\n * @param {int} id\n *      The module ID\n * @return {Module}\n *      The appropriate module\n */\nSandbox.prototype.getModuleById = function (id) {\n\treturn this._application.getModuleById(id);\n};\n\n/**\n * Gets the application config.\n *\n * @method getConfig\n * @return {Object}\n *      The configuration object\n */\nSandbox.prototype.getConfig = function () {\n\treturn this._application._config;\n};\n\n/**\n * Gets an application config param.\n *\n * @method getConfigParam\n * @param {String} name\n *      The param name\n * @return {any}\n *      The appropriate configuration param\n */\nSandbox.prototype.getConfigParam = function (name) {\n\tvar config = this._application._config;\n\n\tif (config[name] !== undefined) {\n\t\treturn config[name];\n\t}\n\telse {\n\t\tthrow Error('The config param ' + name + ' does not exist');\n\t}\n};\n\n/**\n * Adds an event emitter instance.\n *\n * @method addEventEmitter\n * @param {EventEmitter} eventEmitter\n *      The event emitter\n * @return {Sandbox}\n */\nSandbox.prototype.addEventEmitter = function (eventEmitter) {\n\tthis._eventEmitters.push(eventEmitter);\n\treturn this;\n};\n\n/**\n * Removes an event emitter instance.\n *\n * @method addEventEmitter\n * @param {EventEmitter} eventEmitter\n *      The event emitter\n * @return {Sandbox}\n */\nSandbox.prototype.removeEventEmitter = function (eventEmitter) {\n\tvar eventEmitters = this._eventEmitters;\n\tfor (var i = 0, len = eventEmitters.length; i < len; i++) {\n\t\tif (eventEmitters[i] === eventEmitter) {\n\t\t\teventEmitters.splice(i, 1);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn this;\n};\n\n/**\n * Dispatches the event with the given arguments to the attached event emitters.\n *\n * @method dispatch\n * @param {Mixed} ...\n * @return {Sandbox}\n */\nSandbox.prototype.dispatch = function () {\n\tvar eventEmitters = this._eventEmitters;\n\n\tfor(var i = 0, len = eventEmitters.length; i < len; i++) {\n\t\tvar eventEmitter = eventEmitters[i];\n\t\tif(eventEmitter !== undefined) {\n\t\t\teventEmitter.handle.apply(eventEmitter, arguments);\n\t\t}\n\t}\n\n\treturn this;\n};\n/**\n * Base class for the different modules.\n *\n * @author Remo Brunschwiler\n * @namespace T\n * @class Module\n *\n * @constructor\n * @param {Node} ctx\n *      The context node\n * @param {Sandbox} sandbox\n *      The sandbox to get the resources from\n */\n/* global EventEmitter */\nfunction Module(ctx, sandbox) {\n\t/**\n\t * Contains the context node.\n\t *\n\t * @property ctx\n\t * @type Node\n\t */\n\tthis._ctx = ctx;\n\n\t/**\n\t * The sandbox to get the resources from.\n\t *\n\t * @property _sandbox\n\t * @type Sandbox\n\t */\n\tthis._sandbox = sandbox;\n\n\t/**\n\t * The emitter.\n\t *\n\t * @property _events\n\t * @type EventEmitter\n\t */\n\tthis._events = new EventEmitter(sandbox);\n}\n\n/**\n * Template method to start the module.\n *\n * @method start\n * @param {Function} resolve\n *      The resolve promise function\n * @param {Function} reject\n * \t\tThe reject promise function\n */\n/*jshint unused: true */\nModule.prototype.start = function (resolve) {\n\tresolve();\n};\n\n/**\n * Template method to stop the module.\n *\n * @method stop\n */\nModule.prototype.stop = function () {\n\tthis._events.off().disconnect();\n};\n\n/**\n * Responsible for inter-module communication.\n * Classic EventEmitter Api. Heavily inspired by https://github.com/component/emitter\n *\n * @author Remo Brunschwiler\n * @namespace T\n * @class EventEmitter\n *\n * @constructor\n *\n * @param {Sandbox} sandbox\n *      The sandbox instance\n */\nfunction EventEmitter(sandbox) {\n\t/**\n\t * The listeners.\n\t *\n\t * @property _listeners\n\t * @type Object\n\t */\n\tthis._listeners = {};\n\n\t/**\n\t * The sandbox instance.\n\t *\n\t * @property _sandbox\n\t * @type Sandbox\n\t */\n\tthis._sandbox = sandbox;\n\n\t/**\n\t * Indicates whether the instance is connected to the sandbox.\n\t *\n\t * @property _connected\n\t * @type Boolean\n\t */\n\tthis._connected = false;\n}\n\n/**\n * Adds a listener for the given event.\n *\n * @method on\n * @param {String} event\n * @param {Function} listener\n * @return {EventEmitter}\n */\nEventEmitter.prototype.on = EventEmitter.prototype.addListener = function (event, listener) {\n\tthis.connect();\n\n\t(this._listeners['$' + event] = this._listeners['$' + event] || []).push(listener);\n\treturn this;\n};\n\n/**\n * Adds a listener that will be invoked a single\n * time and automatically removed afterwards.\n *\n * @method once\n * @param {String} event\n * @param {Function} listener\n * @return {EventEmitter}\n */\nEventEmitter.prototype.once = function (event, listener) {\n\tthis.connect();\n\n\tfunction on() {\n\t\tthis.off(event, on);\n\t\tlistener.apply(this, arguments);\n\t}\n\n\ton.listener = listener;\n\tthis.on(event, on);\n\treturn this;\n};\n\n/**\n * Remove the given listener for the given event or all\n * registered listeners.\n *\n * @method off\n * @param {String} event\n * @param {Function} listener\n * @return {EventEmitter}\n */\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener = EventEmitter.prototype.removeAllListeners = function (event, listener) {\n\t// all\n\tif (arguments.length === 0) {\n\t\tthis._listeners = {};\n\t\treturn this;\n\t}\n\n\t// specific event\n\tvar listeners = this._listeners['$' + event];\n\tif (!listeners) {\n\t\treturn this;\n\t}\n\n\t// remove all listeners\n\tif (arguments.length === 1) {\n\t\tdelete this._listeners['$' + event];\n\t\treturn this;\n\t}\n\n\t// remove specific listener\n\tvar cb;\n\tfor (var i = 0, len = listeners.length; i < len; i++) {\n\t\tcb = listeners[i];\n\t\tif (cb === listener || cb.listener === listener) {\n\t\t\tlisteners.splice(i, 1);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn this;\n};\n\n/**\n * Dispatches event to the sandbox.\n *\n * @method emit\n * @param {Mixed} ...\n * @return {EventEmitter}\n */\nEventEmitter.prototype.emit = function () {\n\tthis.connect();\n\n\t// dispatches event to the sandbox\n\tthis._sandbox.dispatch.apply(this._sandbox, arguments);\n\n\treturn this;\n};\n\n/**\n * Handles dispatched event from sandbox.\n *\n * @method handle\n * @param {String} event\n * @param {Mixed} ...\n * @return {EventEmitter}\n */\nEventEmitter.prototype.handle = function (event) {\n\tvar args = [].slice.call(arguments, 1),\n\t\tlisteners = this._listeners['$' + event];\n\n\tif (listeners) {\n\t\tlisteners = listeners.slice(0);\n\t\tfor (var i = 0, len = listeners.length; i < len; ++i) {\n\t\t\tlisteners[i].apply(this, args);\n\t\t}\n\t}\n\n\treturn this;\n};\n\n\n/**\n * Return array of listeners for the given event.\n *\n * @method listeners\n * @param {String} event\n * @return {Array}\n */\nEventEmitter.prototype.listeners = function (event) {\n\treturn this._listeners['$' + event] || [];\n};\n\n/**\n * Check if this event emitter has listeners.\n *\n * @method hasListeners\n * @param {String} event\n * @return {Boolean}\n */\nEventEmitter.prototype.hasListeners = function (event) {\n\treturn !!this.listeners(event).length;\n};\n\n/**\n * Connect instance to the sandbox.\n *\n * @method connect\n * @return {EventEmitter}\n */\nEventEmitter.prototype.connect = function () {\n\tif (!this._connected) {\n\t\tthis._sandbox.addEventEmitter(this);\n\t\tthis._connected = true;\n\t}\n\n\treturn this;\n};\n\n/**\n * Disconnect instance from the sandbox.\n *\n * @method disconnect\n * @return {EventEmitter}\n */\nEventEmitter.prototype.disconnect = function () {\n\tif (this._connected) {\n\t\tthis._sandbox.removeEventEmitter(this);\n\t\tthis._connected = false;\n\t}\n\n\treturn this;\n};\n\n\n/**\n * Utility functions.\n *\n * @author Remo Brunschwiler\n * @namespace T\n * @class Utils\n * @static\n */\n/* global Module */\n/* jshint unused: false */\nvar Utils = {\n\t/**\n\t * Capitalizes the first letter of the given string.\n\t *\n\t * @method capitalize\n\t * @param {String} str\n\t *      The original string\n\t * @return {String}\n\t *      The capitalized string\n\t */\n\tcapitalize: function (str) {\n\t\treturn str.substr(0, 1).toUpperCase().concat(str.substr(1));\n\t},\n\n\t/**\n\t * Camelizes the given string.\n\t *\n\t * @method camelize\n\t * @param {String} str\n\t *      The original string\n\t * @return {String}\n\t *      The camelized string\n\t */\n\tcamelize: function (str) {\n\t\treturn str.replace(/(\\-[A-Za-z])/g, function ($1) {\n\t\t\treturn $1.toUpperCase().replace('-', '');\n\t\t});\n\t},\n\n\t/**\n\t * Check whether the given object is a string.\n\t *\n\t * @method isString\n\t * @param {Object} obj\n\t *      The object to check\n\t * @return {Boolean}\n\t */\n\tisString: function (obj) {\n\t\treturn Object.prototype.toString.call(obj) === '[object String]';\n\t},\n\n\t/**\n\t * Check whether the given param is an object.\n\t *\n\t * @method isObject\n\t * @param {Object} obj\n\t *      The object to check\n\t * @return {Boolean}\n\t */\n\tisObject: function (obj) {\n\t\tvar type = typeof obj;\n\t\treturn !!obj && (type === 'object' || type === 'function') && !Array.isArray(obj);\n\t},\n\n\t/**\n\t * Check whether the given param is a function.\n\t *\n\t * @method isFunction\n\t * @param {Object} obj\n\t *      The object to check\n\t * @return {Boolean}\n\t */\n\tisFunction: function (obj) {\n\t\tvar type = typeof obj;\n\t\treturn !!obj && type === 'function';\n\t},\n\n\t/**\n\t * Check whether the given param is a valid node.\n\t *\n\t * @method isNode\n\t * @param {Node} node\n\t *      The node to check\n\t * @return {Boolean}\n\t */\n\tisNode: function (node) {\n\t\tif (!node || !node.nodeType) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn node.nodeType === 1 || node.nodeType === 9;\n\t},\n\n\t/**\n\t * Check whether the element matches the given selector.\n\t *\n\t * @method matches\n\t * @param {Element} el\n\t *      The element to check\n\t * @param {String} selector\n\t *        The selector to check against\n\t * @return {Boolean}\n\t */\n\tmatches: function (el, selector) {\n\t\tvar p = Element.prototype;\n\t\tvar f = p.matches || p.webkitMatchesSelector || p.mozMatchesSelector || p.msMatchesSelector || function (s) {\n\t\t\t\treturn [].slice.call(document.querySelectorAll(s)).indexOf(this) !== -1;\n\t\t\t};\n\t\treturn f.call(el, selector);\n\t},\n\n\t/**\n\t * Extends an object with the given objects.\n\t *\n\t * @method extend\n\t * @param {Object} obj\n\t *      The object to extend\n\t * @param {Object} ...\n\t * @return {Object} the extended object\n\t */\n\textend: function (obj) {\n\t\tif (!Utils.isObject(obj)) {\n\t\t\treturn obj;\n\t\t}\n\t\tvar source, prop;\n\t\tfor (var i = 1, length = arguments.length; i < length; i++) {\n\t\t\tsource = arguments[i];\n\n\t\t\tfor (prop in source) {\n\t\t\t\tif (source.hasOwnProperty(prop)) {\n\t\t\t\t\tobj[prop] = source[prop];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn obj;\n\t},\n\n\t/**\n\t * Get the element from a given node.\n\t *\n\t * @method getElement\n\t * @param {Node} node\n\t *      The node to check\n\t * @return {Element}\n\t */\n\tgetElement: function (node) {\n\t\tif (!this.isNode(node)) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (node.nodeType === 9 && node.documentElement) {\n\t\t\treturn node.documentElement;\n\t\t}\n\t\telse {\n\t\t\treturn node;\n\t\t}\n\t},\n\n\t/**\n\t * Get the module nodes.\n\t *\n\t * @method getModuleNodes\n\t * @param {Node} ctx\n\t *      The ctx to check\n\t * @return {Array}\n\t */\n\tgetModuleNodes: function (ctx) {\n\t\tvar nodes = [].slice.call(ctx.querySelectorAll('[data-t-name]'));\n\n\t\t// check context itself\n\t\tif (this.matches(ctx, '[data-t-name]')) {\n\t\t\tnodes.unshift(ctx);\n\t\t}\n\n\t\treturn nodes;\n\t},\n\n\t/**\n\t * Creates a module class given a class specification.\n\t *\n\t * @method createModule\n\t * @param {object} spec Class specification.\n\t * @return {function} Module constructor function\n\t */\n\tcreateModule: function (spec) {\n\t\t// validate params\n\t\tif (!spec || !Utils.isObject(spec)) {\n\t\t\tthrow Error('Your module spec is not an object. Usage: T.createModule({ … })');\n\t\t}\n\n\t\tvar Constructor = function (ctx, sandbox) {\n\t\t\tModule.call(this, ctx, sandbox);\n\t\t};\n\n\t\tvar proto = Constructor.prototype = Object.create(Module.prototype);\n\t\tproto.constructor = Constructor;\n\n\t\t// apply statics\n\t\tif (spec.hasOwnProperty('statics')) {\n\t\t\tUtils.extend(Constructor, spec.statics);\n\t\t}\n\n\t\t// Ensure that stop is called even if the spec contains a custom stop function\n\t\tif (spec.hasOwnProperty('stop')) {\n\t\t\tproto.stop = function() {\n\t\t\t\t// Call the spec stop function\n\t\t\t\tspec.stop.apply(this, arguments);\n\t\t\t\t// Call the original stop function\n\t\t\t\tModule.prototype.stop.apply(this, arguments);\n\t\t\t};\n\t\t}\n\n\t\tvar reservedKeys = [\n\t\t\t'statics',\n\t\t\t'stop'\n\t\t];\n\n\t\t// mixin spec properties to module prototype\n\t\tfor (var name in spec) {\n\t\t\tif (!spec.hasOwnProperty(name)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// check for reserved keys\n\t\t\tif (reservedKeys.indexOf(name) !== -1) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar property = spec[name];\n\t\t\tproto[name] = property;\n\t\t}\n\n\t\treturn Constructor;\n\t},\n\n\t/**\n\t * Creates a decorator given a decorator specification.\n\t *\n\t * @method createDecorator\n\t * @param {object} spec Decorator specification.\n\t * @return {function} Decorator function\n\t */\n\tcreateDecorator: function (spec) {\n\t\t// validate params\n\t\tif (!spec || !Utils.isObject(spec)) {\n\t\t\tthrow Error('Your decorator spec is not an object. Usage: T.createDecorator({ … })');\n\t\t}\n\n\t\treturn function (orig) {\n\t\t\tvar parent = {},\n\t\t\t\tname;\n\n\t\t\t// save references to original super properties\n\t\t\tfor (name in orig) {\n\t\t\t\tif (Utils.isFunction(orig[name])) {\n\t\t\t\t\tparent[name] = orig[name].bind(orig);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// override original properties and provide _parent property\n\t\t\tfor (name in spec) {\n\t\t\t\tif (spec.hasOwnProperty(name)) {\n\t\t\t\t\tif(Utils.isFunction(spec[name])) {\n\t\t\t\t\t\torig[name] = (function (name, fn) {\n\t\t\t\t\t\t\treturn function () {\n\t\t\t\t\t\t\t\tthis._parent = parent;\n\t\t\t\t\t\t\t\treturn fn.apply(this, arguments);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}(name, spec[name]));\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\t// simple property\n\t\t\t\t\t\torig[name] = spec[name];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n};\n\n\n/* global Application, Sandbox, Module, EventEmitter, Utils */\n/* jshint unused: false */\nvar T = {\n\tApplication: Application,\n\tSandbox: Sandbox,\n\tModule: Module,\n\tEventEmitter: EventEmitter,\n\tcreateModule: Utils.createModule,\n\tcreateDecorator: Utils.createDecorator,\n\tversion: '3.0.0'\n};\nreturn T;\n}));\n"],"sourceRoot":"/source/"}